package com.wcs.newsletter.model.impl;

/*
 * #%L
 * Webstar Newsletter
 * %%
 * Copyright (C) 2013 Webstar Csoport Kft.
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of the 
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public 
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/gpl-3.0.html>.
 * #L%
 */

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.wcs.newsletter.model.Recipient;
import com.wcs.newsletter.model.RecipientModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Recipient service. Represents a row in the &quot;WcsNewsletter_Recipient&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.wcs.newsletter.model.RecipientModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RecipientImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see RecipientImpl
 * @see com.wcs.newsletter.model.Recipient
 * @see com.wcs.newsletter.model.RecipientModel
 * @generated
 */
public class RecipientModelImpl extends BaseModelImpl<Recipient>
    implements RecipientModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a recipient model instance should use the {@link com.wcs.newsletter.model.Recipient} interface instead.
     */
    public static final String TABLE_NAME = "WcsNewsletter_Recipient";
    public static final Object[][] TABLE_COLUMNS = {
            { "recipientId", Types.BIGINT },
            { "newsletterId", Types.BIGINT },
            { "email", Types.VARCHAR },
            { "status", Types.VARCHAR },
            { "errorMessage", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table WcsNewsletter_Recipient (recipientId LONG not null primary key,newsletterId LONG,email VARCHAR(75) null,status VARCHAR(75) null,errorMessage VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table WcsNewsletter_Recipient";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.wcs.newsletter.model.Recipient"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.wcs.newsletter.model.Recipient"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.wcs.newsletter.model.Recipient"),
            true);
    public static long NEWSLETTERID_COLUMN_BITMASK = 1L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.wcs.newsletter.model.Recipient"));
    private static ClassLoader _classLoader = Recipient.class.getClassLoader();
    private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
            Recipient.class
        };
    private long _recipientId;
    private long _newsletterId;
    private long _originalNewsletterId;
    private boolean _setOriginalNewsletterId;
    private String _email;
    private String _status;
    private String _errorMessage;
    private long _columnBitmask;
    private Recipient _escapedModelProxy;

    public RecipientModelImpl() {
    }

    public long getPrimaryKey() {
        return _recipientId;
    }

    public void setPrimaryKey(long primaryKey) {
        setRecipientId(primaryKey);
    }

    public Serializable getPrimaryKeyObj() {
        return new Long(_recipientId);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    public Class<?> getModelClass() {
        return Recipient.class;
    }

    public String getModelClassName() {
        return Recipient.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("recipientId", getRecipientId());
        attributes.put("newsletterId", getNewsletterId());
        attributes.put("email", getEmail());
        attributes.put("status", getStatus());
        attributes.put("errorMessage", getErrorMessage());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long recipientId = (Long) attributes.get("recipientId");

        if (recipientId != null) {
            setRecipientId(recipientId);
        }

        Long newsletterId = (Long) attributes.get("newsletterId");

        if (newsletterId != null) {
            setNewsletterId(newsletterId);
        }

        String email = (String) attributes.get("email");

        if (email != null) {
            setEmail(email);
        }

        String status = (String) attributes.get("status");

        if (status != null) {
            setStatus(status);
        }

        String errorMessage = (String) attributes.get("errorMessage");

        if (errorMessage != null) {
            setErrorMessage(errorMessage);
        }
    }

    public long getRecipientId() {
        return _recipientId;
    }

    public void setRecipientId(long recipientId) {
        _recipientId = recipientId;
    }

    public long getNewsletterId() {
        return _newsletterId;
    }

    public void setNewsletterId(long newsletterId) {
        _columnBitmask |= NEWSLETTERID_COLUMN_BITMASK;

        if (!_setOriginalNewsletterId) {
            _setOriginalNewsletterId = true;

            _originalNewsletterId = _newsletterId;
        }

        _newsletterId = newsletterId;
    }

    public long getOriginalNewsletterId() {
        return _originalNewsletterId;
    }

    public String getEmail() {
        if (_email == null) {
            return StringPool.BLANK;
        } else {
            return _email;
        }
    }

    public void setEmail(String email) {
        _email = email;
    }

    public String getStatus() {
        if (_status == null) {
            return StringPool.BLANK;
        } else {
            return _status;
        }
    }

    public void setStatus(String status) {
        _status = status;
    }

    public String getErrorMessage() {
        if (_errorMessage == null) {
            return StringPool.BLANK;
        } else {
            return _errorMessage;
        }
    }

    public void setErrorMessage(String errorMessage) {
        _errorMessage = errorMessage;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Recipient.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Recipient toEscapedModel() {
        if (_escapedModelProxy == null) {
            _escapedModelProxy = (Recipient) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelProxyInterfaces,
                    new AutoEscapeBeanHandler(this));
        }

        return _escapedModelProxy;
    }

    @Override
    public Object clone() {
        RecipientImpl recipientImpl = new RecipientImpl();

        recipientImpl.setRecipientId(getRecipientId());
        recipientImpl.setNewsletterId(getNewsletterId());
        recipientImpl.setEmail(getEmail());
        recipientImpl.setStatus(getStatus());
        recipientImpl.setErrorMessage(getErrorMessage());

        recipientImpl.resetOriginalValues();

        return recipientImpl;
    }

    public int compareTo(Recipient recipient) {
        long primaryKey = recipient.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        Recipient recipient = null;

        try {
            recipient = (Recipient) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        long primaryKey = recipient.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        RecipientModelImpl recipientModelImpl = this;

        recipientModelImpl._originalNewsletterId = recipientModelImpl._newsletterId;

        recipientModelImpl._setOriginalNewsletterId = false;

        recipientModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Recipient> toCacheModel() {
        RecipientCacheModel recipientCacheModel = new RecipientCacheModel();

        recipientCacheModel.recipientId = getRecipientId();

        recipientCacheModel.newsletterId = getNewsletterId();

        recipientCacheModel.email = getEmail();

        String email = recipientCacheModel.email;

        if ((email != null) && (email.length() == 0)) {
            recipientCacheModel.email = null;
        }

        recipientCacheModel.status = getStatus();

        String status = recipientCacheModel.status;

        if ((status != null) && (status.length() == 0)) {
            recipientCacheModel.status = null;
        }

        recipientCacheModel.errorMessage = getErrorMessage();

        String errorMessage = recipientCacheModel.errorMessage;

        if ((errorMessage != null) && (errorMessage.length() == 0)) {
            recipientCacheModel.errorMessage = null;
        }

        return recipientCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(11);

        sb.append("{recipientId=");
        sb.append(getRecipientId());
        sb.append(", newsletterId=");
        sb.append(getNewsletterId());
        sb.append(", email=");
        sb.append(getEmail());
        sb.append(", status=");
        sb.append(getStatus());
        sb.append(", errorMessage=");
        sb.append(getErrorMessage());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(19);

        sb.append("<model><model-name>");
        sb.append("com.wcs.newsletter.model.Recipient");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>recipientId</column-name><column-value><![CDATA[");
        sb.append(getRecipientId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>newsletterId</column-name><column-value><![CDATA[");
        sb.append(getNewsletterId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>email</column-name><column-value><![CDATA[");
        sb.append(getEmail());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>status</column-name><column-value><![CDATA[");
        sb.append(getStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>errorMessage</column-name><column-value><![CDATA[");
        sb.append(getErrorMessage());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
