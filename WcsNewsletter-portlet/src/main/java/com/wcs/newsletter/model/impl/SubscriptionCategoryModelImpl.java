package com.wcs.newsletter.model.impl;

/*
 * #%L
 * Webstar Newsletter
 * %%
 * Copyright (C) 2013 Webstar Csoport Kft.
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of the 
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public 
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/gpl-3.0.html>.
 * #L%
 */

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import com.wcs.newsletter.model.SubscriptionCategory;
import com.wcs.newsletter.model.SubscriptionCategoryModel;
import com.wcs.newsletter.service.persistence.SubscriptionCategoryPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the SubscriptionCategory service. Represents a row in the &quot;WcsNewsletter_Subscription_Category&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.wcs.newsletter.model.SubscriptionCategoryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SubscriptionCategoryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SubscriptionCategoryImpl
 * @see com.wcs.newsletter.model.SubscriptionCategory
 * @see com.wcs.newsletter.model.SubscriptionCategoryModel
 * @generated
 */
public class SubscriptionCategoryModelImpl extends BaseModelImpl<SubscriptionCategory>
    implements SubscriptionCategoryModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a subscription category model instance should use the {@link com.wcs.newsletter.model.SubscriptionCategory} interface instead.
     */
    public static final String TABLE_NAME = "WcsNewsletter_Subscription_Category";
    public static final Object[][] TABLE_COLUMNS = {
            { "subscriptionId", Types.BIGINT },
            { "categoryId", Types.BIGINT },
            { "confirmationKey", Types.VARCHAR },
            { "cancellationKey", Types.VARCHAR },
            { "status", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table WcsNewsletter_Subscription_Category (subscriptionId LONG not null,categoryId LONG not null,confirmationKey VARCHAR(75) null,cancellationKey VARCHAR(75) null,status VARCHAR(75) null,primary key (subscriptionId, categoryId))";
    public static final String TABLE_SQL_DROP = "drop table WcsNewsletter_Subscription_Category";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.wcs.newsletter.model.SubscriptionCategory"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.wcs.newsletter.model.SubscriptionCategory"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.wcs.newsletter.model.SubscriptionCategory"),
            true);
    public static long CANCELLATIONKEY_COLUMN_BITMASK = 1L;
    public static long CATEGORYID_COLUMN_BITMASK = 2L;
    public static long CONFIRMATIONKEY_COLUMN_BITMASK = 4L;
    public static long STATUS_COLUMN_BITMASK = 8L;
    public static long SUBSCRIPTIONID_COLUMN_BITMASK = 16L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.wcs.newsletter.model.SubscriptionCategory"));
    private static ClassLoader _classLoader = SubscriptionCategory.class.getClassLoader();
    private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
            SubscriptionCategory.class
        };
    private long _subscriptionId;
    private long _originalSubscriptionId;
    private boolean _setOriginalSubscriptionId;
    private long _categoryId;
    private long _originalCategoryId;
    private boolean _setOriginalCategoryId;
    private String _confirmationKey;
    private String _originalConfirmationKey;
    private String _cancellationKey;
    private String _originalCancellationKey;
    private String _status;
    private String _originalStatus;
    private long _columnBitmask;
    private SubscriptionCategory _escapedModelProxy;

    public SubscriptionCategoryModelImpl() {
    }

    public SubscriptionCategoryPK getPrimaryKey() {
        return new SubscriptionCategoryPK(_subscriptionId, _categoryId);
    }

    public void setPrimaryKey(SubscriptionCategoryPK primaryKey) {
        setSubscriptionId(primaryKey.subscriptionId);
        setCategoryId(primaryKey.categoryId);
    }

    public Serializable getPrimaryKeyObj() {
        return new SubscriptionCategoryPK(_subscriptionId, _categoryId);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((SubscriptionCategoryPK) primaryKeyObj);
    }

    public Class<?> getModelClass() {
        return SubscriptionCategory.class;
    }

    public String getModelClassName() {
        return SubscriptionCategory.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("subscriptionId", getSubscriptionId());
        attributes.put("categoryId", getCategoryId());
        attributes.put("confirmationKey", getConfirmationKey());
        attributes.put("cancellationKey", getCancellationKey());
        attributes.put("status", getStatus());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long subscriptionId = (Long) attributes.get("subscriptionId");

        if (subscriptionId != null) {
            setSubscriptionId(subscriptionId);
        }

        Long categoryId = (Long) attributes.get("categoryId");

        if (categoryId != null) {
            setCategoryId(categoryId);
        }

        String confirmationKey = (String) attributes.get("confirmationKey");

        if (confirmationKey != null) {
            setConfirmationKey(confirmationKey);
        }

        String cancellationKey = (String) attributes.get("cancellationKey");

        if (cancellationKey != null) {
            setCancellationKey(cancellationKey);
        }

        String status = (String) attributes.get("status");

        if (status != null) {
            setStatus(status);
        }
    }

    public long getSubscriptionId() {
        return _subscriptionId;
    }

    public void setSubscriptionId(long subscriptionId) {
        _columnBitmask |= SUBSCRIPTIONID_COLUMN_BITMASK;

        if (!_setOriginalSubscriptionId) {
            _setOriginalSubscriptionId = true;

            _originalSubscriptionId = _subscriptionId;
        }

        _subscriptionId = subscriptionId;
    }

    public long getOriginalSubscriptionId() {
        return _originalSubscriptionId;
    }

    public long getCategoryId() {
        return _categoryId;
    }

    public void setCategoryId(long categoryId) {
        _columnBitmask |= CATEGORYID_COLUMN_BITMASK;

        if (!_setOriginalCategoryId) {
            _setOriginalCategoryId = true;

            _originalCategoryId = _categoryId;
        }

        _categoryId = categoryId;
    }

    public long getOriginalCategoryId() {
        return _originalCategoryId;
    }

    public String getConfirmationKey() {
        if (_confirmationKey == null) {
            return StringPool.BLANK;
        } else {
            return _confirmationKey;
        }
    }

    public void setConfirmationKey(String confirmationKey) {
        _columnBitmask |= CONFIRMATIONKEY_COLUMN_BITMASK;

        if (_originalConfirmationKey == null) {
            _originalConfirmationKey = _confirmationKey;
        }

        _confirmationKey = confirmationKey;
    }

    public String getOriginalConfirmationKey() {
        return GetterUtil.getString(_originalConfirmationKey);
    }

    public String getCancellationKey() {
        if (_cancellationKey == null) {
            return StringPool.BLANK;
        } else {
            return _cancellationKey;
        }
    }

    public void setCancellationKey(String cancellationKey) {
        _columnBitmask |= CANCELLATIONKEY_COLUMN_BITMASK;

        if (_originalCancellationKey == null) {
            _originalCancellationKey = _cancellationKey;
        }

        _cancellationKey = cancellationKey;
    }

    public String getOriginalCancellationKey() {
        return GetterUtil.getString(_originalCancellationKey);
    }

    public String getStatus() {
        if (_status == null) {
            return StringPool.BLANK;
        } else {
            return _status;
        }
    }

    public void setStatus(String status) {
        _columnBitmask |= STATUS_COLUMN_BITMASK;

        if (_originalStatus == null) {
            _originalStatus = _status;
        }

        _status = status;
    }

    public String getOriginalStatus() {
        return GetterUtil.getString(_originalStatus);
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public SubscriptionCategory toEscapedModel() {
        if (_escapedModelProxy == null) {
            _escapedModelProxy = (SubscriptionCategory) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelProxyInterfaces,
                    new AutoEscapeBeanHandler(this));
        }

        return _escapedModelProxy;
    }

    @Override
    public Object clone() {
        SubscriptionCategoryImpl subscriptionCategoryImpl = new SubscriptionCategoryImpl();

        subscriptionCategoryImpl.setSubscriptionId(getSubscriptionId());
        subscriptionCategoryImpl.setCategoryId(getCategoryId());
        subscriptionCategoryImpl.setConfirmationKey(getConfirmationKey());
        subscriptionCategoryImpl.setCancellationKey(getCancellationKey());
        subscriptionCategoryImpl.setStatus(getStatus());

        subscriptionCategoryImpl.resetOriginalValues();

        return subscriptionCategoryImpl;
    }

    public int compareTo(SubscriptionCategory subscriptionCategory) {
        SubscriptionCategoryPK primaryKey = subscriptionCategory.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        SubscriptionCategory subscriptionCategory = null;

        try {
            subscriptionCategory = (SubscriptionCategory) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        SubscriptionCategoryPK primaryKey = subscriptionCategory.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
        SubscriptionCategoryModelImpl subscriptionCategoryModelImpl = this;

        subscriptionCategoryModelImpl._originalSubscriptionId = subscriptionCategoryModelImpl._subscriptionId;

        subscriptionCategoryModelImpl._setOriginalSubscriptionId = false;

        subscriptionCategoryModelImpl._originalCategoryId = subscriptionCategoryModelImpl._categoryId;

        subscriptionCategoryModelImpl._setOriginalCategoryId = false;

        subscriptionCategoryModelImpl._originalConfirmationKey = subscriptionCategoryModelImpl._confirmationKey;

        subscriptionCategoryModelImpl._originalCancellationKey = subscriptionCategoryModelImpl._cancellationKey;

        subscriptionCategoryModelImpl._originalStatus = subscriptionCategoryModelImpl._status;

        subscriptionCategoryModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<SubscriptionCategory> toCacheModel() {
        SubscriptionCategoryCacheModel subscriptionCategoryCacheModel = new SubscriptionCategoryCacheModel();

        subscriptionCategoryCacheModel.subscriptionId = getSubscriptionId();

        subscriptionCategoryCacheModel.categoryId = getCategoryId();

        subscriptionCategoryCacheModel.confirmationKey = getConfirmationKey();

        String confirmationKey = subscriptionCategoryCacheModel.confirmationKey;

        if ((confirmationKey != null) && (confirmationKey.length() == 0)) {
            subscriptionCategoryCacheModel.confirmationKey = null;
        }

        subscriptionCategoryCacheModel.cancellationKey = getCancellationKey();

        String cancellationKey = subscriptionCategoryCacheModel.cancellationKey;

        if ((cancellationKey != null) && (cancellationKey.length() == 0)) {
            subscriptionCategoryCacheModel.cancellationKey = null;
        }

        subscriptionCategoryCacheModel.status = getStatus();

        String status = subscriptionCategoryCacheModel.status;

        if ((status != null) && (status.length() == 0)) {
            subscriptionCategoryCacheModel.status = null;
        }

        return subscriptionCategoryCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(11);

        sb.append("{subscriptionId=");
        sb.append(getSubscriptionId());
        sb.append(", categoryId=");
        sb.append(getCategoryId());
        sb.append(", confirmationKey=");
        sb.append(getConfirmationKey());
        sb.append(", cancellationKey=");
        sb.append(getCancellationKey());
        sb.append(", status=");
        sb.append(getStatus());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(19);

        sb.append("<model><model-name>");
        sb.append("com.wcs.newsletter.model.SubscriptionCategory");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>subscriptionId</column-name><column-value><![CDATA[");
        sb.append(getSubscriptionId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>categoryId</column-name><column-value><![CDATA[");
        sb.append(getCategoryId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>confirmationKey</column-name><column-value><![CDATA[");
        sb.append(getConfirmationKey());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>cancellationKey</column-name><column-value><![CDATA[");
        sb.append(getCancellationKey());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>status</column-name><column-value><![CDATA[");
        sb.append(getStatus());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
