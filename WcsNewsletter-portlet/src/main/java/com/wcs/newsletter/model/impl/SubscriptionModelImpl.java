package com.wcs.newsletter.model.impl;

/*
 * #%L
 * Webstar Newsletter
 * %%
 * Copyright (C) 2013 Webstar Csoport Kft.
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of the 
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public 
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/gpl-3.0.html>.
 * #L%
 */

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.wcs.newsletter.model.Subscription;
import com.wcs.newsletter.model.SubscriptionModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Subscription service. Represents a row in the &quot;WcsNewsletter_Subscription&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.wcs.newsletter.model.SubscriptionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SubscriptionImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SubscriptionImpl
 * @see com.wcs.newsletter.model.Subscription
 * @see com.wcs.newsletter.model.SubscriptionModel
 * @generated
 */
public class SubscriptionModelImpl extends BaseModelImpl<Subscription>
    implements SubscriptionModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a subscription model instance should use the {@link com.wcs.newsletter.model.Subscription} interface instead.
     */
    public static final String TABLE_NAME = "WcsNewsletter_Subscription";
    public static final Object[][] TABLE_COLUMNS = {
            { "subscriptionId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "email", Types.VARCHAR },
            { "subscriptionDate", Types.TIMESTAMP }
        };
    public static final String TABLE_SQL_CREATE = "create table WcsNewsletter_Subscription (subscriptionId LONG not null primary key,userId LONG,email VARCHAR(75) null,subscriptionDate DATE null)";
    public static final String TABLE_SQL_DROP = "drop table WcsNewsletter_Subscription";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.wcs.newsletter.model.Subscription"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.wcs.newsletter.model.Subscription"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.wcs.newsletter.model.Subscription"),
            true);
    public static long EMAIL_COLUMN_BITMASK = 1L;
    public static long USERID_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.wcs.newsletter.model.Subscription"));
    private static ClassLoader _classLoader = Subscription.class.getClassLoader();
    private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
            Subscription.class
        };
    private long _subscriptionId;
    private long _userId;
    private String _userUuid;
    private long _originalUserId;
    private boolean _setOriginalUserId;
    private String _email;
    private String _originalEmail;
    private Date _subscriptionDate;
    private long _columnBitmask;
    private Subscription _escapedModelProxy;

    public SubscriptionModelImpl() {
    }

    public long getPrimaryKey() {
        return _subscriptionId;
    }

    public void setPrimaryKey(long primaryKey) {
        setSubscriptionId(primaryKey);
    }

    public Serializable getPrimaryKeyObj() {
        return new Long(_subscriptionId);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    public Class<?> getModelClass() {
        return Subscription.class;
    }

    public String getModelClassName() {
        return Subscription.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("subscriptionId", getSubscriptionId());
        attributes.put("userId", getUserId());
        attributes.put("email", getEmail());
        attributes.put("subscriptionDate", getSubscriptionDate());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long subscriptionId = (Long) attributes.get("subscriptionId");

        if (subscriptionId != null) {
            setSubscriptionId(subscriptionId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        String email = (String) attributes.get("email");

        if (email != null) {
            setEmail(email);
        }

        Date subscriptionDate = (Date) attributes.get("subscriptionDate");

        if (subscriptionDate != null) {
            setSubscriptionDate(subscriptionDate);
        }
    }

    public long getSubscriptionId() {
        return _subscriptionId;
    }

    public void setSubscriptionId(long subscriptionId) {
        _subscriptionId = subscriptionId;
    }

    public long getUserId() {
        return _userId;
    }

    public void setUserId(long userId) {
        _columnBitmask |= USERID_COLUMN_BITMASK;

        if (!_setOriginalUserId) {
            _setOriginalUserId = true;

            _originalUserId = _userId;
        }

        _userId = userId;
    }

    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    public long getOriginalUserId() {
        return _originalUserId;
    }

    public String getEmail() {
        if (_email == null) {
            return StringPool.BLANK;
        } else {
            return _email;
        }
    }

    public void setEmail(String email) {
        _columnBitmask |= EMAIL_COLUMN_BITMASK;

        if (_originalEmail == null) {
            _originalEmail = _email;
        }

        _email = email;
    }

    public String getOriginalEmail() {
        return GetterUtil.getString(_originalEmail);
    }

    public Date getSubscriptionDate() {
        return _subscriptionDate;
    }

    public void setSubscriptionDate(Date subscriptionDate) {
        _subscriptionDate = subscriptionDate;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Subscription.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Subscription toEscapedModel() {
        if (_escapedModelProxy == null) {
            _escapedModelProxy = (Subscription) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelProxyInterfaces,
                    new AutoEscapeBeanHandler(this));
        }

        return _escapedModelProxy;
    }

    @Override
    public Object clone() {
        SubscriptionImpl subscriptionImpl = new SubscriptionImpl();

        subscriptionImpl.setSubscriptionId(getSubscriptionId());
        subscriptionImpl.setUserId(getUserId());
        subscriptionImpl.setEmail(getEmail());
        subscriptionImpl.setSubscriptionDate(getSubscriptionDate());

        subscriptionImpl.resetOriginalValues();

        return subscriptionImpl;
    }

    public int compareTo(Subscription subscription) {
        long primaryKey = subscription.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        Subscription subscription = null;

        try {
            subscription = (Subscription) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        long primaryKey = subscription.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        SubscriptionModelImpl subscriptionModelImpl = this;

        subscriptionModelImpl._originalUserId = subscriptionModelImpl._userId;

        subscriptionModelImpl._setOriginalUserId = false;

        subscriptionModelImpl._originalEmail = subscriptionModelImpl._email;

        subscriptionModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Subscription> toCacheModel() {
        SubscriptionCacheModel subscriptionCacheModel = new SubscriptionCacheModel();

        subscriptionCacheModel.subscriptionId = getSubscriptionId();

        subscriptionCacheModel.userId = getUserId();

        subscriptionCacheModel.email = getEmail();

        String email = subscriptionCacheModel.email;

        if ((email != null) && (email.length() == 0)) {
            subscriptionCacheModel.email = null;
        }

        Date subscriptionDate = getSubscriptionDate();

        if (subscriptionDate != null) {
            subscriptionCacheModel.subscriptionDate = subscriptionDate.getTime();
        } else {
            subscriptionCacheModel.subscriptionDate = Long.MIN_VALUE;
        }

        return subscriptionCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(9);

        sb.append("{subscriptionId=");
        sb.append(getSubscriptionId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", email=");
        sb.append(getEmail());
        sb.append(", subscriptionDate=");
        sb.append(getSubscriptionDate());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(16);

        sb.append("<model><model-name>");
        sb.append("com.wcs.newsletter.model.Subscription");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>subscriptionId</column-name><column-value><![CDATA[");
        sb.append(getSubscriptionId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>email</column-name><column-value><![CDATA[");
        sb.append(getEmail());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>subscriptionDate</column-name><column-value><![CDATA[");
        sb.append(getSubscriptionDate());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
