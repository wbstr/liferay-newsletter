package com.wcs.newsletter.model.impl;

/*
 * #%L
 * Webstar Newsletter
 * %%
 * Copyright (C) 2013 Webstar Csoport Kft.
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of the 
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public 
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/gpl-3.0.html>.
 * #L%
 */

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.wcs.newsletter.model.NewsletterConfig;
import com.wcs.newsletter.model.NewsletterConfigModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the NewsletterConfig service. Represents a row in the &quot;WcsNewsletter_NewsletterConfig&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.wcs.newsletter.model.NewsletterConfigModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NewsletterConfigImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see NewsletterConfigImpl
 * @see com.wcs.newsletter.model.NewsletterConfig
 * @see com.wcs.newsletter.model.NewsletterConfigModel
 * @generated
 */
public class NewsletterConfigModelImpl extends BaseModelImpl<NewsletterConfig>
    implements NewsletterConfigModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a newsletter config model instance should use the {@link com.wcs.newsletter.model.NewsletterConfig} interface instead.
     */
    public static final String TABLE_NAME = "WcsNewsletter_NewsletterConfig";
    public static final Object[][] TABLE_COLUMNS = {
            { "configId", Types.BIGINT },
            { "configKey", Types.VARCHAR },
            { "configValue", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table WcsNewsletter_NewsletterConfig (configId LONG not null primary key,configKey VARCHAR(75) null,configValue VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table WcsNewsletter_NewsletterConfig";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.wcs.newsletter.model.NewsletterConfig"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.wcs.newsletter.model.NewsletterConfig"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.wcs.newsletter.model.NewsletterConfig"),
            true);
    public static long CONFIGKEY_COLUMN_BITMASK = 1L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.wcs.newsletter.model.NewsletterConfig"));
    private static ClassLoader _classLoader = NewsletterConfig.class.getClassLoader();
    private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
            NewsletterConfig.class
        };
    private long _configId;
    private String _configKey;
    private String _originalConfigKey;
    private String _configValue;
    private long _columnBitmask;
    private NewsletterConfig _escapedModelProxy;

    public NewsletterConfigModelImpl() {
    }

    public long getPrimaryKey() {
        return _configId;
    }

    public void setPrimaryKey(long primaryKey) {
        setConfigId(primaryKey);
    }

    public Serializable getPrimaryKeyObj() {
        return new Long(_configId);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    public Class<?> getModelClass() {
        return NewsletterConfig.class;
    }

    public String getModelClassName() {
        return NewsletterConfig.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("configId", getConfigId());
        attributes.put("configKey", getConfigKey());
        attributes.put("configValue", getConfigValue());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long configId = (Long) attributes.get("configId");

        if (configId != null) {
            setConfigId(configId);
        }

        String configKey = (String) attributes.get("configKey");

        if (configKey != null) {
            setConfigKey(configKey);
        }

        String configValue = (String) attributes.get("configValue");

        if (configValue != null) {
            setConfigValue(configValue);
        }
    }

    public long getConfigId() {
        return _configId;
    }

    public void setConfigId(long configId) {
        _configId = configId;
    }

    public String getConfigKey() {
        if (_configKey == null) {
            return StringPool.BLANK;
        } else {
            return _configKey;
        }
    }

    public void setConfigKey(String configKey) {
        _columnBitmask |= CONFIGKEY_COLUMN_BITMASK;

        if (_originalConfigKey == null) {
            _originalConfigKey = _configKey;
        }

        _configKey = configKey;
    }

    public String getOriginalConfigKey() {
        return GetterUtil.getString(_originalConfigKey);
    }

    public String getConfigValue() {
        if (_configValue == null) {
            return StringPool.BLANK;
        } else {
            return _configValue;
        }
    }

    public void setConfigValue(String configValue) {
        _configValue = configValue;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            NewsletterConfig.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public NewsletterConfig toEscapedModel() {
        if (_escapedModelProxy == null) {
            _escapedModelProxy = (NewsletterConfig) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelProxyInterfaces,
                    new AutoEscapeBeanHandler(this));
        }

        return _escapedModelProxy;
    }

    @Override
    public Object clone() {
        NewsletterConfigImpl newsletterConfigImpl = new NewsletterConfigImpl();

        newsletterConfigImpl.setConfigId(getConfigId());
        newsletterConfigImpl.setConfigKey(getConfigKey());
        newsletterConfigImpl.setConfigValue(getConfigValue());

        newsletterConfigImpl.resetOriginalValues();

        return newsletterConfigImpl;
    }

    public int compareTo(NewsletterConfig newsletterConfig) {
        long primaryKey = newsletterConfig.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        NewsletterConfig newsletterConfig = null;

        try {
            newsletterConfig = (NewsletterConfig) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        long primaryKey = newsletterConfig.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        NewsletterConfigModelImpl newsletterConfigModelImpl = this;

        newsletterConfigModelImpl._originalConfigKey = newsletterConfigModelImpl._configKey;

        newsletterConfigModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<NewsletterConfig> toCacheModel() {
        NewsletterConfigCacheModel newsletterConfigCacheModel = new NewsletterConfigCacheModel();

        newsletterConfigCacheModel.configId = getConfigId();

        newsletterConfigCacheModel.configKey = getConfigKey();

        String configKey = newsletterConfigCacheModel.configKey;

        if ((configKey != null) && (configKey.length() == 0)) {
            newsletterConfigCacheModel.configKey = null;
        }

        newsletterConfigCacheModel.configValue = getConfigValue();

        String configValue = newsletterConfigCacheModel.configValue;

        if ((configValue != null) && (configValue.length() == 0)) {
            newsletterConfigCacheModel.configValue = null;
        }

        return newsletterConfigCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(7);

        sb.append("{configId=");
        sb.append(getConfigId());
        sb.append(", configKey=");
        sb.append(getConfigKey());
        sb.append(", configValue=");
        sb.append(getConfigValue());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(13);

        sb.append("<model><model-name>");
        sb.append("com.wcs.newsletter.model.NewsletterConfig");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>configId</column-name><column-value><![CDATA[");
        sb.append(getConfigId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>configKey</column-name><column-value><![CDATA[");
        sb.append(getConfigKey());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>configValue</column-name><column-value><![CDATA[");
        sb.append(getConfigValue());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
