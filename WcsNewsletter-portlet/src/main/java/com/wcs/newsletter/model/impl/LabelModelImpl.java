package com.wcs.newsletter.model.impl;

/*
 * #%L
 * Webstar Newsletter
 * %%
 * Copyright (C) 2013 Webstar Csoport Kft.
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of the 
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public 
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/gpl-3.0.html>.
 * #L%
 */

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.wcs.newsletter.model.Label;
import com.wcs.newsletter.model.LabelModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Label service. Represents a row in the &quot;WcsNewsletter_Label&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.wcs.newsletter.model.LabelModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LabelImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LabelImpl
 * @see com.wcs.newsletter.model.Label
 * @see com.wcs.newsletter.model.LabelModel
 * @generated
 */
public class LabelModelImpl extends BaseModelImpl<Label> implements LabelModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a label model instance should use the {@link com.wcs.newsletter.model.Label} interface instead.
     */
    public static final String TABLE_NAME = "WcsNewsletter_Label";
    public static final Object[][] TABLE_COLUMNS = {
            { "labelId", Types.BIGINT },
            { "tagId", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table WcsNewsletter_Label (labelId LONG not null primary key IDENTITY,tagId LONG)";
    public static final String TABLE_SQL_DROP = "drop table WcsNewsletter_Label";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.wcs.newsletter.model.Label"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.wcs.newsletter.model.Label"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.wcs.newsletter.model.Label"),
            true);
    public static long TAGID_COLUMN_BITMASK = 1L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.wcs.newsletter.model.Label"));
    private static ClassLoader _classLoader = Label.class.getClassLoader();
    private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
            Label.class
        };
    private long _labelId;
    private long _tagId;
    private long _originalTagId;
    private boolean _setOriginalTagId;
    private long _columnBitmask;
    private Label _escapedModelProxy;

    public LabelModelImpl() {
    }

    public long getPrimaryKey() {
        return _labelId;
    }

    public void setPrimaryKey(long primaryKey) {
        setLabelId(primaryKey);
    }

    public Serializable getPrimaryKeyObj() {
        return new Long(_labelId);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    public Class<?> getModelClass() {
        return Label.class;
    }

    public String getModelClassName() {
        return Label.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("labelId", getLabelId());
        attributes.put("tagId", getTagId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long labelId = (Long) attributes.get("labelId");

        if (labelId != null) {
            setLabelId(labelId);
        }

        Long tagId = (Long) attributes.get("tagId");

        if (tagId != null) {
            setTagId(tagId);
        }
    }

    public long getLabelId() {
        return _labelId;
    }

    public void setLabelId(long labelId) {
        _labelId = labelId;
    }

    public long getTagId() {
        return _tagId;
    }

    public void setTagId(long tagId) {
        _columnBitmask |= TAGID_COLUMN_BITMASK;

        if (!_setOriginalTagId) {
            _setOriginalTagId = true;

            _originalTagId = _tagId;
        }

        _tagId = tagId;
    }

    public long getOriginalTagId() {
        return _originalTagId;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Label.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Label toEscapedModel() {
        if (_escapedModelProxy == null) {
            _escapedModelProxy = (Label) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelProxyInterfaces,
                    new AutoEscapeBeanHandler(this));
        }

        return _escapedModelProxy;
    }

    @Override
    public Object clone() {
        LabelImpl labelImpl = new LabelImpl();

        labelImpl.setLabelId(getLabelId());
        labelImpl.setTagId(getTagId());

        labelImpl.resetOriginalValues();

        return labelImpl;
    }

    public int compareTo(Label label) {
        long primaryKey = label.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        Label label = null;

        try {
            label = (Label) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        long primaryKey = label.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        LabelModelImpl labelModelImpl = this;

        labelModelImpl._originalTagId = labelModelImpl._tagId;

        labelModelImpl._setOriginalTagId = false;

        labelModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Label> toCacheModel() {
        LabelCacheModel labelCacheModel = new LabelCacheModel();

        labelCacheModel.labelId = getLabelId();

        labelCacheModel.tagId = getTagId();

        return labelCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(5);

        sb.append("{labelId=");
        sb.append(getLabelId());
        sb.append(", tagId=");
        sb.append(getTagId());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(10);

        sb.append("<model><model-name>");
        sb.append("com.wcs.newsletter.model.Label");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>labelId</column-name><column-value><![CDATA[");
        sb.append(getLabelId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>tagId</column-name><column-value><![CDATA[");
        sb.append(getTagId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
