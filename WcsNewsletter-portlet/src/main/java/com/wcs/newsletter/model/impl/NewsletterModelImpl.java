package com.wcs.newsletter.model.impl;

/*
 * #%L
 * Webstar Newsletter
 * %%
 * Copyright (C) 2013 Webstar Csoport Kft.
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of the 
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public 
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/gpl-3.0.html>.
 * #L%
 */

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.wcs.newsletter.model.Newsletter;
import com.wcs.newsletter.model.NewsletterModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Newsletter service. Represents a row in the &quot;WcsNewsletter_Newsletter&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.wcs.newsletter.model.NewsletterModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NewsletterImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see NewsletterImpl
 * @see com.wcs.newsletter.model.Newsletter
 * @see com.wcs.newsletter.model.NewsletterModel
 * @generated
 */
public class NewsletterModelImpl extends BaseModelImpl<Newsletter>
    implements NewsletterModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a newsletter model instance should use the {@link com.wcs.newsletter.model.Newsletter} interface instead.
     */
    public static final String TABLE_NAME = "WcsNewsletter_Newsletter";
    public static final Object[][] TABLE_COLUMNS = {
            { "newsletterId", Types.BIGINT },
            { "subject", Types.VARCHAR },
            { "sender", Types.VARCHAR },
            { "contentId", Types.VARCHAR },
            { "contentVersion", Types.VARCHAR },
            { "templateId", Types.VARCHAR },
            { "templateVersion", Types.VARCHAR },
            { "parentId", Types.BIGINT },
            { "creationTime", Types.TIMESTAMP },
            { "state", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table WcsNewsletter_Newsletter (newsletterId LONG not null primary key,subject VARCHAR(75) null,sender VARCHAR(75) null,contentId VARCHAR(75) null,contentVersion VARCHAR(75) null,templateId VARCHAR(75) null,templateVersion VARCHAR(75) null,parentId LONG,creationTime DATE null,state VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table WcsNewsletter_Newsletter";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.wcs.newsletter.model.Newsletter"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.wcs.newsletter.model.Newsletter"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.wcs.newsletter.model.Newsletter"),
            true);
    public static long PARENTID_COLUMN_BITMASK = 1L;
    public static final String MAPPING_TABLE_WCSNEWSLETTER_NEWSLETTER_CATEGORY_NAME =
        "WcsNewsletter_Newsletter_Category";
    public static final Object[][] MAPPING_TABLE_WCSNEWSLETTER_NEWSLETTER_CATEGORY_COLUMNS =
        {
            { "newsletterId", Types.BIGINT },
            { "categoryId", Types.BIGINT }
        };
    public static final String MAPPING_TABLE_WCSNEWSLETTER_NEWSLETTER_CATEGORY_SQL_CREATE =
        "create table WcsNewsletter_Newsletter_Category (newsletterId LONG not null,categoryId LONG not null,primary key (newsletterId, categoryId))";
    public static final boolean FINDER_CACHE_ENABLED_WCSNEWSLETTER_NEWSLETTER_CATEGORY =
        GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.WcsNewsletter_Newsletter_Category"),
            true);
    public static final String MAPPING_TABLE_WCSNEWSLETTER_NEWSLETTER_LABEL_NAME =
        "WcsNewsletter_Newsletter_Label";
    public static final Object[][] MAPPING_TABLE_WCSNEWSLETTER_NEWSLETTER_LABEL_COLUMNS =
        {
            { "newsletterId", Types.BIGINT },
            { "labelId", Types.BIGINT }
        };
    public static final String MAPPING_TABLE_WCSNEWSLETTER_NEWSLETTER_LABEL_SQL_CREATE =
        "create table WcsNewsletter_Newsletter_Label (newsletterId LONG not null,labelId LONG not null,primary key (newsletterId, labelId))";
    public static final boolean FINDER_CACHE_ENABLED_WCSNEWSLETTER_NEWSLETTER_LABEL =
        GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.WcsNewsletter_Newsletter_Label"),
            true);
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.wcs.newsletter.model.Newsletter"));
    private static ClassLoader _classLoader = Newsletter.class.getClassLoader();
    private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
            Newsletter.class
        };
    private long _newsletterId;
    private String _subject;
    private String _sender;
    private String _contentId;
    private String _contentVersion;
    private String _templateId;
    private String _templateVersion;
    private long _parentId;
    private long _originalParentId;
    private boolean _setOriginalParentId;
    private Date _creationTime;
    private String _state;
    private long _columnBitmask;
    private Newsletter _escapedModelProxy;

    public NewsletterModelImpl() {
    }

    public long getPrimaryKey() {
        return _newsletterId;
    }

    public void setPrimaryKey(long primaryKey) {
        setNewsletterId(primaryKey);
    }

    public Serializable getPrimaryKeyObj() {
        return new Long(_newsletterId);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    public Class<?> getModelClass() {
        return Newsletter.class;
    }

    public String getModelClassName() {
        return Newsletter.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("newsletterId", getNewsletterId());
        attributes.put("subject", getSubject());
        attributes.put("sender", getSender());
        attributes.put("contentId", getContentId());
        attributes.put("contentVersion", getContentVersion());
        attributes.put("templateId", getTemplateId());
        attributes.put("templateVersion", getTemplateVersion());
        attributes.put("parentId", getParentId());
        attributes.put("creationTime", getCreationTime());
        attributes.put("state", getState());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long newsletterId = (Long) attributes.get("newsletterId");

        if (newsletterId != null) {
            setNewsletterId(newsletterId);
        }

        String subject = (String) attributes.get("subject");

        if (subject != null) {
            setSubject(subject);
        }

        String sender = (String) attributes.get("sender");

        if (sender != null) {
            setSender(sender);
        }

        String contentId = (String) attributes.get("contentId");

        if (contentId != null) {
            setContentId(contentId);
        }

        String contentVersion = (String) attributes.get("contentVersion");

        if (contentVersion != null) {
            setContentVersion(contentVersion);
        }

        String templateId = (String) attributes.get("templateId");

        if (templateId != null) {
            setTemplateId(templateId);
        }

        String templateVersion = (String) attributes.get("templateVersion");

        if (templateVersion != null) {
            setTemplateVersion(templateVersion);
        }

        Long parentId = (Long) attributes.get("parentId");

        if (parentId != null) {
            setParentId(parentId);
        }

        Date creationTime = (Date) attributes.get("creationTime");

        if (creationTime != null) {
            setCreationTime(creationTime);
        }

        String state = (String) attributes.get("state");

        if (state != null) {
            setState(state);
        }
    }

    public long getNewsletterId() {
        return _newsletterId;
    }

    public void setNewsletterId(long newsletterId) {
        _newsletterId = newsletterId;
    }

    public String getSubject() {
        if (_subject == null) {
            return StringPool.BLANK;
        } else {
            return _subject;
        }
    }

    public void setSubject(String subject) {
        _subject = subject;
    }

    public String getSender() {
        if (_sender == null) {
            return StringPool.BLANK;
        } else {
            return _sender;
        }
    }

    public void setSender(String sender) {
        _sender = sender;
    }

    public String getContentId() {
        if (_contentId == null) {
            return StringPool.BLANK;
        } else {
            return _contentId;
        }
    }

    public void setContentId(String contentId) {
        _contentId = contentId;
    }

    public String getContentVersion() {
        if (_contentVersion == null) {
            return StringPool.BLANK;
        } else {
            return _contentVersion;
        }
    }

    public void setContentVersion(String contentVersion) {
        _contentVersion = contentVersion;
    }

    public String getTemplateId() {
        if (_templateId == null) {
            return StringPool.BLANK;
        } else {
            return _templateId;
        }
    }

    public void setTemplateId(String templateId) {
        _templateId = templateId;
    }

    public String getTemplateVersion() {
        if (_templateVersion == null) {
            return StringPool.BLANK;
        } else {
            return _templateVersion;
        }
    }

    public void setTemplateVersion(String templateVersion) {
        _templateVersion = templateVersion;
    }

    public long getParentId() {
        return _parentId;
    }

    public void setParentId(long parentId) {
        _columnBitmask |= PARENTID_COLUMN_BITMASK;

        if (!_setOriginalParentId) {
            _setOriginalParentId = true;

            _originalParentId = _parentId;
        }

        _parentId = parentId;
    }

    public long getOriginalParentId() {
        return _originalParentId;
    }

    public Date getCreationTime() {
        return _creationTime;
    }

    public void setCreationTime(Date creationTime) {
        _creationTime = creationTime;
    }

    public String getState() {
        if (_state == null) {
            return StringPool.BLANK;
        } else {
            return _state;
        }
    }

    public void setState(String state) {
        _state = state;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Newsletter.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Newsletter toEscapedModel() {
        if (_escapedModelProxy == null) {
            _escapedModelProxy = (Newsletter) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelProxyInterfaces,
                    new AutoEscapeBeanHandler(this));
        }

        return _escapedModelProxy;
    }

    @Override
    public Object clone() {
        NewsletterImpl newsletterImpl = new NewsletterImpl();

        newsletterImpl.setNewsletterId(getNewsletterId());
        newsletterImpl.setSubject(getSubject());
        newsletterImpl.setSender(getSender());
        newsletterImpl.setContentId(getContentId());
        newsletterImpl.setContentVersion(getContentVersion());
        newsletterImpl.setTemplateId(getTemplateId());
        newsletterImpl.setTemplateVersion(getTemplateVersion());
        newsletterImpl.setParentId(getParentId());
        newsletterImpl.setCreationTime(getCreationTime());
        newsletterImpl.setState(getState());

        newsletterImpl.resetOriginalValues();

        return newsletterImpl;
    }

    public int compareTo(Newsletter newsletter) {
        long primaryKey = newsletter.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        Newsletter newsletter = null;

        try {
            newsletter = (Newsletter) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        long primaryKey = newsletter.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        NewsletterModelImpl newsletterModelImpl = this;

        newsletterModelImpl._originalParentId = newsletterModelImpl._parentId;

        newsletterModelImpl._setOriginalParentId = false;

        newsletterModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Newsletter> toCacheModel() {
        NewsletterCacheModel newsletterCacheModel = new NewsletterCacheModel();

        newsletterCacheModel.newsletterId = getNewsletterId();

        newsletterCacheModel.subject = getSubject();

        String subject = newsletterCacheModel.subject;

        if ((subject != null) && (subject.length() == 0)) {
            newsletterCacheModel.subject = null;
        }

        newsletterCacheModel.sender = getSender();

        String sender = newsletterCacheModel.sender;

        if ((sender != null) && (sender.length() == 0)) {
            newsletterCacheModel.sender = null;
        }

        newsletterCacheModel.contentId = getContentId();

        String contentId = newsletterCacheModel.contentId;

        if ((contentId != null) && (contentId.length() == 0)) {
            newsletterCacheModel.contentId = null;
        }

        newsletterCacheModel.contentVersion = getContentVersion();

        String contentVersion = newsletterCacheModel.contentVersion;

        if ((contentVersion != null) && (contentVersion.length() == 0)) {
            newsletterCacheModel.contentVersion = null;
        }

        newsletterCacheModel.templateId = getTemplateId();

        String templateId = newsletterCacheModel.templateId;

        if ((templateId != null) && (templateId.length() == 0)) {
            newsletterCacheModel.templateId = null;
        }

        newsletterCacheModel.templateVersion = getTemplateVersion();

        String templateVersion = newsletterCacheModel.templateVersion;

        if ((templateVersion != null) && (templateVersion.length() == 0)) {
            newsletterCacheModel.templateVersion = null;
        }

        newsletterCacheModel.parentId = getParentId();

        Date creationTime = getCreationTime();

        if (creationTime != null) {
            newsletterCacheModel.creationTime = creationTime.getTime();
        } else {
            newsletterCacheModel.creationTime = Long.MIN_VALUE;
        }

        newsletterCacheModel.state = getState();

        String state = newsletterCacheModel.state;

        if ((state != null) && (state.length() == 0)) {
            newsletterCacheModel.state = null;
        }

        return newsletterCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(21);

        sb.append("{newsletterId=");
        sb.append(getNewsletterId());
        sb.append(", subject=");
        sb.append(getSubject());
        sb.append(", sender=");
        sb.append(getSender());
        sb.append(", contentId=");
        sb.append(getContentId());
        sb.append(", contentVersion=");
        sb.append(getContentVersion());
        sb.append(", templateId=");
        sb.append(getTemplateId());
        sb.append(", templateVersion=");
        sb.append(getTemplateVersion());
        sb.append(", parentId=");
        sb.append(getParentId());
        sb.append(", creationTime=");
        sb.append(getCreationTime());
        sb.append(", state=");
        sb.append(getState());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(34);

        sb.append("<model><model-name>");
        sb.append("com.wcs.newsletter.model.Newsletter");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>newsletterId</column-name><column-value><![CDATA[");
        sb.append(getNewsletterId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>subject</column-name><column-value><![CDATA[");
        sb.append(getSubject());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sender</column-name><column-value><![CDATA[");
        sb.append(getSender());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>contentId</column-name><column-value><![CDATA[");
        sb.append(getContentId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>contentVersion</column-name><column-value><![CDATA[");
        sb.append(getContentVersion());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>templateId</column-name><column-value><![CDATA[");
        sb.append(getTemplateId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>templateVersion</column-name><column-value><![CDATA[");
        sb.append(getTemplateVersion());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>parentId</column-name><column-value><![CDATA[");
        sb.append(getParentId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>creationTime</column-name><column-value><![CDATA[");
        sb.append(getCreationTime());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>state</column-name><column-value><![CDATA[");
        sb.append(getState());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
